// Code generated by go-bindata.
// sources:
// assets/config-template.json
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigTemplateJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x50\x88\x56\x2a\xae\x2c\xce\xc9\x4f\x57\xd2\x51\x50\xd2\x2f\x4b\x2c\xd2\x07\xb2\xf5\xa1\x42\xb1\x5c\xb1\x80\x00\x00\x00\xff\xff\xb6\xbd\x4b\xbe\x23\x00\x00\x00")

func assetsConfigTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigTemplateJson,
		"assets/config-template.json",
	)
}

func assetsConfigTemplateJson() (*asset, error) {
	bytes, err := assetsConfigTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config-template.json", size: 35, mode: os.FileMode(436), modTime: time.Unix(1462073477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\x81\x2a\x33\x95\x5c\x5b\x94\x6c\x5f\xef\x12\x49\xd6\x4c\xea\x66\x26\xbe\x49\x93\xce\xd9\x9e\xce\x4d\x4e\x93\x81\x48\x48\xc4\x99\x22\x58\x10\x94\xea\xb6\xfa\xef\xb7\x0b\xbe\x88\x2f\x00\x29\x25\x57\xe8\x83\x45\x01\xbb\x58\x3c\xbb\xfb\xec\x82\xc9\xec\x9b\x1f\x3f\xde\x3e\xfc\xfb\xe7\xb7\xc4\x57\x9b\x60\xfe\x62\x96\xff\x61\xd4\x9b\xbf\x20\x30\x66\x8a\xab\x80\xcd\x03\xb1\xde\x88\x70\x36\x4a\x9f\xd2\x99\x58\x3d\xe7\xdf\x71\x2c\x85\xf7\x4c\xfe\x28\x1e\xf5\x4f\xd4\x7d\x5a\x4b\x91\x84\xde\x84\xbc\x1c\x8f\xc7\x53\x32\xfa\xee\xe5\xe5\x6b\xfc\x4c\xc9\x77\xa3\xca\xda\x95\x08\xd5\x70\x45\x37\x3c\x78\x9e\x90\xde\x8f\x52\x70\x8f\xdc\xd3\x30\xee\x5d\x90\x18\xfe\x0c\x63\x26\xf9\x6a\x5a\x88\xec\x8b\x6f\x2f\x63\xee\xb1\x25\x95\xb5\xbd\x23\x11\x73\xc5\x45\x38\x21\x74\x19\x8b\x20\x51\x6c\x5a\x99\x57\x22\x9a\x90\x71\xf5\xb7\x80\xad\x54\xe3\xc7\xa5\x50\x4a\x6c\x1a\x3f\xef\xb8\xa7\xfc\x09\xb9\xfa\x7e\x1c\xfd\x36\xb5\x9f\x3a\x3b\x6d\xd5\x34\xea\x79\x3c\x5c\x4f\xc8\x25\xc8\x92\x31\x7e\x5a\x0f\x36\x27\xb4\x76\x38\x57\x04\x42\x82\x76\x7a\x8d\x9f\xaa\x76\x37\x91\x31\x4e\x46\x82\x87\x8a\xc9\xea\xa4\xc7\xe3\x28\xa0\x80\xf0\x32\x10\xee\x53\x9b\x59\x97\xdf\xd7\xcf\xb5\xa1\x72\xcd\x01\x4f\x34\xf8\x0a\x0d\x6f\x3b\xb6\x87\x9f\xa9\xc5\x23\x92\x05\x54\xf1\x2d\xeb\x3a\xb5\x43\x5d\x5c\xd6\x16\x55\x57\xaf\xe0\xf3\xba\x55\x11\x9d\xf8\x62\xcb\xea\xf1\x71\xb2\x16\x12\x47\x34\x3c\x31\xc8\x32\x3f\xed\x7c\x5e\x9f\xa9\x6c\x7f\xfd\xea\xf5\x9b\xeb\x57\xd5\x05\x92\xaf\x7d\x95\xfa\x62\xda\x4c\x94\x98\xff\xce\x60\xf2\xaa\x3e\xa9\xa3\xfa\xf2\xb2\x11\x92\x42\x7a\x4c\x0e\x25\xf5\x78\x12\x4f\xc8\xdf\xeb\xf3\x85\xeb\xd1\xaf\x7f\x2b\xcf\x5a\x91\x98\xb0\x4d\xa4\xea\x09\x5f\x84\x57\x28\x42\xb3\x77\x5d\xb0\x9e\x85\xea\xff\x96\xac\x86\xfc\xcb\x90\x3b\x2e\x8d\xab\xb4\x73\x2b\x12\xc9\x21\x54\x3e\xb0\x1d\xf0\x4e\xf6\x74\x41\x7a\xef\x13\x97\x7b\x54\xf3\x11\x79\x78\x8e\xd8\x4e\x82\x43\x65\xef\x30\x53\xf9\x11\x98\x52\x00\x44\x2e\xb3\x3b\xce\x86\x71\x0e\xcf\x1c\xa0\xdc\xfe\x55\x8c\x76\x12\x40\x98\x3a\xab\x40\xec\x86\x80\x0f\x4d\x94\xb0\xcc\xfe\x66\x9a\x2d\xc2\xaa\xc1\x25\x3a\x23\x86\x1a\x24\x0c\x96\x9d\xa4\x51\x75\xc1\x96\xc7\x7c\xc9\x03\xae\x60\x5b\x9f\x7b\x1e\x0b\xbb\xf1\x32\xd3\x45\x59\x93\xfe\x1e\xb4\x47\x66\x0a\xbd\xc9\x01\x6d\xe4\x99\x33\xb2\x29\x95\x0b\x18\x90\x39\x2f\x9b\xcc\x59\x01\x23\x92\x16\x5a\x54\x54\x25\x71\xcd\x22\x9f\xd9\x58\xa2\xcc\x2f\x92\x59\x99\xf8\xf8\x48\xb2\xd7\xbb\x46\x8c\x1d\xac\x9e\x4c\x86\x3b\xb6\x7c\xe2\x10\xf7\xae\x14\x41\xd0\x2c\xd3\x99\x5a\x7d\x00\x02\xed\x01\x64\x89\x24\x10\x54\x8a\xbb\x34\x20\x85\x54\x5c\x6f\x17\x2a\x27\xcf\xe5\x7c\x21\xf9\xef\xe0\x46\xab\x64\xab\x65\x43\x25\x01\xb4\xd6\x32\x71\x8d\x9f\x23\x0f\x3a\x54\x7e\xb2\x59\xb6\xa9\xab\xc7\x4a\xbb\x3a\x57\xc8\xb0\xa3\x8a\x19\xcd\x9b\x8d\xb2\x46\x6d\x36\x4a\xdb\xba\x19\x76\x6a\x59\x0f\x87\x41\xce\xbd\x9b\x5e\xc6\xed\xbd\xf9\x6c\x04\x3f\xd5\x26\xb3\xcc\x30\x4f\xa6\x71\x59\x9d\x03\xa3\x79\xa4\x0e\xad\xe1\x16\xdc\xfe\x78\x47\x6e\x6a\xc6\x43\x5a\x48\x16\x43\x3d\xea\xed\xe2\xc9\x68\x04\x49\x45\x03\x5f\xc4\x6a\xf2\x47\x24\xa4\xda\x8f\x76\xd0\xfc\x55\x23\x8d\x6f\xb8\x7a\x2f\xd6\x31\xfa\x7d\x3c\xbe\xa8\x05\x2d\xf8\xfd\x31\x94\x70\x46\x88\xc6\xea\x1c\x0f\x39\xc4\xca\x2a\x09\x5d\x0c\xfb\xc1\x59\xcd\x10\x2d\xee\xf3\xd8\x89\x21\xaf\x99\x02\x43\x43\xb6\x23\xbf\xb0\xe5\xbd\x7e\x1e\xe8\xb9\xcc\xda\xb3\xe9\x8b\x36\x59\x07\xb8\x3f\x62\x21\xa8\xd0\x3f\x8a\xf0\x23\x3c\x39\x4b\x1e\x7a\x5a\xcb\xd9\xb4\x43\x78\x03\x5b\xd0\x35\x3b\xc8\xff\x94\xfe\x70\x82\x0a\x37\x10\x71\x49\xc1\x2d\x3e\x56\xc4\xcd\xf2\x9e\xd8\xa0\x87\xf6\x16\xf5\x30\xed\xe4\x1d\xc0\x0d\xf1\x84\x9b\x6c\x20\x26\x9c\x35\x53\x6f\x03\x86\x5f\x7f\x78\xbe\xf3\x06\xfd\x6c\x49\xdf\x66\x25\xaa\xc9\x99\xb6\x45\x4d\xb6\xa4\x6f\xb2\xb6\x10\x12\xe1\x13\x7b\xf6\xc4\x0e\xd1\x2e\x7c\xcb\x4c\xce\xc5\x81\x41\xe8\x0a\x0f\x91\x61\x0e\x08\xde\xe2\xf7\x3f\xff\x84\x07\xe0\x5f\xd7\x6f\xda\x8b\x83\xaf\xc8\x20\x15\xba\x21\x57\xff\xb0\xa9\xce\xd5\xd3\x1c\xf5\x12\x58\xce\xaf\x09\x93\xcf\xf7\x2c\x60\xae\x12\x72\xd0\x3b\xb4\x51\x59\xb9\xea\x9d\x5d\x58\x95\xe2\xd8\xe5\x4a\x77\xe0\x42\xb1\x8b\x3f\x51\x44\xeb\x8d\x52\x92\x2f\x81\xb9\x07\x7d\x8f\x2a\x3a\x0c\xe9\x86\xf5\xcf\x16\x06\xb8\x0a\x3d\x0e\x0f\x81\x40\xde\x3d\xfc\xf4\x1e\x34\xf6\xfb\xe6\x03\xef\x1b\xbf\xee\x4b\xb1\x53\x99\xdc\x57\xed\x4e\x89\x60\x62\x80\xc8\xc3\xb6\xc2\x1e\x31\x5a\xae\x6f\x40\x61\x2d\x19\x0b\x3b\xd2\x16\xc7\x01\x72\x24\x3a\xe7\xc0\x89\x78\x4e\xad\xc4\x70\xd8\x7d\x73\x3f\xa8\x93\x5f\xbb\x1b\xa8\x30\xed\xd5\x86\x5b\x4a\x11\x93\x8e\x08\xc6\x40\xd4\x3b\x4b\x06\xb9\x11\x42\x30\xdd\xe1\xed\x6e\x4b\x03\x9b\x9d\x6e\xc0\xa8\xcc\x17\xd9\x64\xcd\x41\xe0\x41\xb4\x2a\x46\xcc\x32\xa6\xe3\x59\x18\x49\x7b\xd6\xd1\x1e\x18\xd4\xb6\x6a\x80\x90\xf1\x5c\x17\x0e\x98\x66\xff\x8d\x05\xa6\xfc\x3f\xef\x3f\x7e\x70\x22\xa8\xf0\x6c\xc0\x1c\x4c\x02\x13\x59\x20\x6e\xb8\xde\x59\xf1\x80\xc5\xdd\x3e\xcd\x92\xf6\x98\x54\x91\x4c\x25\x32\x4c\x65\xb1\xc0\xdc\x2b\xa8\x3d\x9b\xb8\xbc\x5d\x47\x24\xe0\x60\x01\x90\x75\x61\x65\xd8\xc6\x5e\x0d\x26\x48\x45\x16\x76\xfe\xf0\xca\x1c\xeb\x82\x79\x8a\x65\xb9\x07\xb4\xc1\xb7\x46\x7a\xc5\xa1\x15\xbb\x20\x9c\x7e\x69\xe5\x27\x88\x10\xe8\x8a\x5d\x36\x18\x7d\x3b\x5a\xc3\x8d\xe8\x5b\xba\x89\xa6\xbd\xe6\xd1\xcd\x32\xb3\x54\x26\x50\xc7\x8b\xcc\x53\x91\xf5\x09\x22\xbd\x54\xe4\xd7\x44\x9c\x20\xd4\x4f\x85\x5e\x8e\xaf\x5f\x83\x90\x05\x29\xaf\x12\x2a\x29\x5c\xe6\x70\xd9\x39\x34\x82\x44\xf7\x6e\x7d\x1e\x78\x03\xcf\xa6\x70\x34\x22\xf7\xba\xe7\x83\x86\x26\xbb\x93\x59\xd4\xa5\xad\xe1\x83\x88\x60\xe3\xfc\xe9\x9d\x6e\x8b\xed\xaa\x6f\x81\x14\x42\x92\x44\x24\x80\x2e\xca\x9e\x0a\x9f\x91\x3c\xc2\xc7\x28\x0f\x4a\x8b\x42\x0c\xdb\x6f\xa0\xae\xc4\x6f\x74\x25\x6b\x2b\x8f\x5a\x6d\xa9\x45\x3b\x3f\x37\xa3\x94\x1e\x2d\x39\x62\x4d\x96\xaa\xef\x68\xe8\x01\x0d\x57\xab\x6c\x1f\xdf\x50\xf4\xcf\x2a\xbe\xc9\xb5\x1e\x5d\xf7\x2c\xac\xf6\x39\x89\x80\x6c\xd8\x03\xbe\x09\xed\x60\xb5\xf2\xd2\x5a\x65\x31\xeb\x2e\x01\x04\x16\x8f\x0d\xb0\x83\x0f\xdf\xc1\xc1\x09\x85\x00\xc9\x68\xa0\xb1\x06\xaf\x42\x03\x24\x0c\xe8\x72\xa0\xf5\xad\x70\x86\xcd\x47\x45\x7d\xc9\xd6\x39\x3e\x8d\x3f\xee\xc2\x9f\x25\x74\xb3\x52\x3d\x0f\x40\xd5\xd9\x29\xfe\x25\xe7\x35\xae\x02\x05\x8b\xaf\xf7\x40\x61\x66\x05\x29\x80\xca\x66\x5b\xc1\x7e\xfa\xcd\x35\xb2\x79\xfa\x2a\xbb\xb3\x4a\xe3\xd0\xdc\x7c\x9a\x5e\x32\xe8\x93\x73\x03\x1a\xa4\x7f\x76\x6a\x63\x90\x27\x61\x29\x72\xb0\xcb\xb3\x55\xc5\x0c\xe8\x7a\x8d\x40\x91\x45\x35\x3d\xde\x04\x41\x41\xff\x26\x80\xf3\x10\x08\x58\xb8\x56\x3e\x99\xa7\x0a\x8b\xcb\x97\x0d\xea\x22\xec\xb8\x8e\x5d\xf8\x33\xbb\x69\x28\x1b\xd6\x95\xc1\xba\xf3\xf3\xb6\xc8\xca\x0f\xc2\x17\x58\xec\x01\xf2\x0f\xd0\x8f\x03\x4b\x6f\xc4\x96\xa5\x5c\x7a\x58\x61\xe9\x67\x4c\xa1\xd5\x02\x7c\x76\x67\xea\x6a\x45\xca\x3d\x0e\xf4\x7d\x75\x2e\x28\x96\x14\x1d\x54\x07\x5b\x14\xeb\x3a\x9a\xd0\xd3\x5b\xc1\xb4\x53\x39\x9a\xe1\x1a\x7a\xc1\x9f\x31\x2b\x9e\x06\xc7\xb5\xc8\xc7\xdd\xa5\x3b\xc4\x4f\xbf\x4e\x37\x15\x7c\xd1\x95\xba\xa9\xa6\xf3\x5a\xdd\x80\xb7\x34\x7b\xa1\x5f\x58\xb4\xfb\xbf\xd4\x43\x96\x22\xc0\xda\xb7\x96\xb3\xfc\xc8\x8b\x7b\x67\x5b\x5b\xbf\xa2\x37\x04\x9a\xb5\x06\xcd\x73\x20\xf5\xdf\x52\xd7\x1f\x54\xac\xbe\x20\xdc\x58\xe9\x70\x68\x9a\xc0\x1a\x87\x0b\x3f\x8d\x17\x87\xae\xeb\x13\xf9\x8f\xb3\x38\x1f\x5d\x90\xfe\xd0\xda\x9e\x62\x23\xa3\x9b\x59\x92\x5f\xa6\x7d\xdd\x05\xd8\xb7\x52\x6c\xd3\xd2\x0a\x53\x13\x13\x6a\x97\x80\x5c\x05\x83\xcc\x5c\xe4\xf3\x19\xf6\x18\xf3\xd9\x48\xff\xb1\x5c\x11\x52\x79\x7d\x33\x8c\x3f\x63\x61\xe0\x96\xe2\xa7\x17\xc6\x96\x6b\xfd\x45\xbe\x6d\x5b\x9c\x96\xdd\x5c\x6e\x34\x51\x73\x37\x8e\x50\xbc\x32\xa2\xb5\x62\x08\x4b\x7e\xd1\x2b\xba\xef\x14\x26\x15\x85\x78\x86\xc7\xae\x15\x8f\xc3\xea\xa4\xd4\x0d\x75\xe8\xcd\xda\x50\x74\x13\x85\xca\xdd\xb5\xbe\xd2\x40\x82\x10\x22\x65\x01\xaa\x91\x17\x65\x84\x0b\x8d\x36\x98\x2b\xf5\x38\x73\xe5\x02\x36\x2c\x04\xed\xee\xf9\x01\xe6\xe1\x26\xcf\xdd\x27\xc2\xb6\xb0\xb1\x3d\x78\x90\xa0\x70\x59\xfd\x55\x98\xb5\xae\x1e\xd3\x49\xe6\xe3\x4b\x3a\xca\xc2\xba\xaf\xec\x2c\xf3\xd1\xec\x26\xdd\x80\xc6\xf1\x07\xc8\x90\x96\x4b\x7a\xbb\x86\xe3\x42\x26\x1f\xcd\x36\xe2\x30\xd3\x06\xf3\xbf\x74\xaf\x42\xb2\x7f\x9d\xca\x29\x0b\xbd\xd6\xfe\x36\x31\x74\x7d\x21\xe3\x72\xba\x35\xda\xb8\xd2\xeb\xc4\x9e\x25\xf1\x70\x7c\x5a\xe4\x14\xed\xb8\xe0\xef\x41\xa6\xfa\xe2\x10\x2b\xb4\xcb\x05\xf4\x68\xb8\xf7\xb6\x3c\xc8\xe0\xd0\x90\x23\xe9\x60\x63\xd0\x42\x3a\x38\x98\xa3\xa8\x5c\x43\xfd\xad\x6c\x9e\x22\xd9\x62\x42\x21\xd6\x7d\x2d\x34\x56\xb5\x7c\x1c\xc8\xe2\xb4\xfd\x8f\xa7\xaf\xea\xea\x52\x3c\x2a\x99\xb0\x16\xcb\x3a\xaf\xa2\xf9\xd8\x1f\xdd\xa3\x98\xdc\x56\x76\xd7\x8a\xcb\x58\xd9\x1c\x76\x64\x88\x62\xa9\xd7\x3c\xd5\xe8\x85\x8b\xa7\x7d\xc9\x8c\x74\x33\xe0\xb6\x40\x68\x10\x1f\xef\xf4\x9b\xb6\xd4\xe8\xc7\xbb\x4c\x07\xd4\xe0\xec\x1f\x9c\x66\xa3\xf4\xdf\xb6\x66\x23\xfd\x1f\x99\xfe\x17\x00\x00\xff\xff\xdf\xd2\x10\x97\xdf\x24\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 9439, mode: os.FileMode(436), modTime: time.Unix(1462594390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/config-template.json": assetsConfigTemplateJson,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"config-template.json": &bintree{assetsConfigTemplateJson, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

